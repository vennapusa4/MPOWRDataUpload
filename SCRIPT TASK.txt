-------------------
User::ColumnNames,User::FilePath,$Package::BlobDownloadPath,User::ChildFiles --READ ONLY UAT
User::ColumnValidation,User::DeleteQuery,User::FileId,User::FileOwners,User::ParentFileName,User::SelectQuery,User::SheetName  --READ WRITE UAT
User::ChildFiles,User::FileName,User::ModifiedBy,User::UploadedBy   --READ ONLY PROD
User::DeleteQuery,User::FileId,User::FileOwners,User::InsertQuery   --READ WRITE PROD
-------------------

------------------
UAT PREVALIDATION SCRIPT
------------------
#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.OleDb;
using System.IO;
using System.Linq;
#endregion

namespace ST_cc9298230b4043989f1bb7b234e76560
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            string connectionString = string.Empty;
            string ExcelFileName = Dts.Variables["User::FilePath"].Value.ToString();
            string childFile = ExcelFileName.Substring(Dts.Variables["$Package::BlobDownloadPath"].Value.ToString().Length + 1, (ExcelFileName.Length - (Dts.Variables["$Package::BlobDownloadPath"].Value.ToString().Length + 1)));
            var childFiles = (DataTable)Dts.Variables["User::ChildFiles"].Value;

            var CurrentFile = (from DataRow Ro in childFiles.Rows
                               where Ro["FileName"].ToString() == childFile
                               select Ro).FirstOrDefault();
            StreamReader sr = new StreamReader(ExcelFileName);
            string[] Sheet = sr.ReadLine().ToString().Replace("\"", "").Split(',');
            sr.Close();
            string geo = "'" + CurrentFile["Geos"].ToString().Replace(",", "','") + "'";
            string country = "'" + CurrentFile["Countries"].ToString().Replace(",", "','") + "'";
            string financial = "'" + CurrentFile["Years"].ToString().Replace(",", "','") + "'";
            Dts.Variables["User::FileId"].Value = CurrentFile["FileId"];
            Dts.Variables["User::ParentFileName"].Value = childFile;

            var strTo = string.Empty;
            if (CurrentFile["UploadedBy"].ToString() == CurrentFile["ModifiedBy"].ToString())
            {
                strTo = CurrentFile["UploadedBy"].ToString();
            }
            else
            {
                strTo = CurrentFile["UploadedBy"].ToString() + ";" + CurrentFile["ModifiedBy"].ToString();
            }
            Dts.Variables["User::FileOwners"].Value = strTo;
            if (CurrentFile["DataLevel"].ToString() == "Country")
            {
                // Dts.Variables["User::SelectQuery"].Value = "SELECT * FROM [" + SheetsName + "] Where Geo in (" + geo + ") AND  Country in (" + contry + ") AND FinancialYear IN (" + financial + ")";
                Dts.Variables["User::DeleteQuery"].Value = "DELETE FROM PartnerSales Where Geo in (SELECT DISTINCT geo FROM [dbo].[PartnerSales_Staging]) AND  Country in (SELECT DISTINCT Country FROM [dbo].[PartnerSales_Staging]) AND FinancialYear in (SELECT FinancialYear Country FROM [dbo].[PartnerSales_Staging]) AND Geo in (" + geo + ") AND country IN (" + country + ") AND  FinancialYear IN (" + financial + ")";

            }
            else
            {
                //   Dts.Variables["User::SelectQuery"].Value = "SELECT * FROM [" + SheetsName + "] Where Geo in (" + geo + ")  AND FinancialYear IN (" + financial + ")";
                Dts.Variables["User::DeleteQuery"].Value = "DELETE FROM PartnerSales Where Geo in (SELECT DISTINCT geo FROM [dbo].[PartnerSales_Staging]) AND FinancialYear in (SELECT FinancialYear Country FROM [dbo].[PartnerSales_Staging]) AND Geo in (" + geo + ")  AND FinancialYear IN (" + financial + ")";
            }

            DataTable ColumnNames = new DataTable();
            OleDbDataAdapter da = new OleDbDataAdapter();
            da.Fill(ColumnNames, Dts.Variables["User::ColumnNames"].Value);
            int i = 0, j = 0;

            foreach (var dc in Sheet)
            {
                i = i + 1;
                foreach (DataRow row in ColumnNames.Rows)
                {
                    if (dc.ToLower() == row["COLUMN_NAME"].ToString().ToLower())
                    {
                        j = j + 1;
                        break;
                    }
                }
            }
            if (i != j)
            {
                Dts.Variables["User::ColumnValidation"].Value = false;
            }

            ColumnNames.Clear();

            Dts.TaskResult = (int)ScriptResults.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion




    }
}

-------------------

------------------
PROD SCRIPT TASK
------------------
#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using System.Linq;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_85298885f3cc4aa3bec23588e3b97954
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            // TODO: Add your code here
            string FileName = Dts.Variables["User::FileName"].Value.ToString();
            var childFiles = (DataTable)Dts.Variables["User::ChildFiles"].Value;

            var CurrentFile = (from DataRow Ro in childFiles.Rows
                               where Ro["FileName"].ToString() == FileName
                               select Ro).FirstOrDefault();

            string geo = "'" + CurrentFile["Geos"].ToString().Replace(",", "','") + "'";
            string contry = "'" + CurrentFile["Countries"].ToString().Replace(",", "','") + "'";
            string financial = "'" + CurrentFile["Years"].ToString().Replace(",", "','") + "'";
            Dts.Variables["User::FileId"].Value = CurrentFile["ID"];
            if (CurrentFile["DataLevel"].ToString() == "Country")
            {
                Dts.Variables["User::InsertQuery"].Value = "Select [PartnerType] ,[Geo] ,[BusinessUnit] ,[Membership] ,[GeoID] ,[Country] ,[District] ,[PartnerID]  ,PartnerTypeID  ,BusinessUnitID ,CountryID  ,DistrictID  ,MembershipTypeID ,[PartnerName] ,[FinancialYear] ,[Sellout_Q1] ,[Sellout_Q2] ,[Sellout_Q3] ,[Sellout_Q4] ,[Sellout_1H] ,[Sellout_2H] ,[SellOutForPlatinumAndGold_Q1] ,[SellOutForPlatinumAndGold_Q2] ,[SellOutForPlatinumAndGold_Q3] ,[SellOutForPlatinumAndGold_Q4] ,[SellOutForSilverAndBelow_Q1] ,[SellOutForSilverAndBelow_Q2] ,[SellOutForSilverAndBelow_Q3] ,[SellOutForSilverAndBelow_Q4] ,[MDF_1H] ,[MDF_2H]  ,[SOW_Q4] ,[SellOutForPlatinumAndGold_1H] ,[SellOutForPlatinumAndGold_2H] ,[SellOutForSilverAndBelow_1H] ,[SellOutForSilverAndBelow_2H] ,[Planned_1H] ,[Planned_2H] ,[MGO_1H] ,[MGO_2H] ,[Won_MGO_1H] ,[Won_MGO_2H]  ,[MGO_ROI_1H]  ,[Won_MGO_ROI_1H]  ,[MGO_ROI_2H] ,[Won_MGO_ROI_2H] ,[Prediction_Method] ,[Prediction_Accuracy] ,[Proj_sales], GETUTCDATE() as CreatedDate FROM PartnerSales Where Geo in (" + geo + ") AND  Country in (" + contry + ") AND FinancialYear IN (" + financial + ")";
                Dts.Variables["User::DeleteQuery"].Value = "DELETE FROM PartnerSales Where Geo in (" + geo + ") AND  Country in (" + contry + ") AND FinancialYear IN (" + financial + ")";

            }
            else
            {
                Dts.Variables["User::InsertQuery"].Value = "Select [PartnerType] ,[Geo] ,[BusinessUnit] ,[Membership] ,[GeoID] ,[Country] ,[District] ,[PartnerID]  ,PartnerTypeID  ,BusinessUnitID ,CountryID  ,DistrictID  ,MembershipTypeID ,[PartnerName] ,[FinancialYear] ,[Sellout_Q1] ,[Sellout_Q2] ,[Sellout_Q3] ,[Sellout_Q4] ,[Sellout_1H] ,[Sellout_2H] ,[SellOutForPlatinumAndGold_Q1] ,[SellOutForPlatinumAndGold_Q2] ,[SellOutForPlatinumAndGold_Q3] ,[SellOutForPlatinumAndGold_Q4] ,[SellOutForSilverAndBelow_Q1] ,[SellOutForSilverAndBelow_Q2] ,[SellOutForSilverAndBelow_Q3] ,[SellOutForSilverAndBelow_Q4] ,[MDF_1H] ,[MDF_2H]  ,[SOW_Q4] ,[SellOutForPlatinumAndGold_1H] ,[SellOutForPlatinumAndGold_2H] ,[SellOutForSilverAndBelow_1H] ,[SellOutForSilverAndBelow_2H] ,[Planned_1H] ,[Planned_2H] ,[MGO_1H] ,[MGO_2H] ,[Won_MGO_1H] ,[Won_MGO_2H]  ,[MGO_ROI_1H]  ,[Won_MGO_ROI_1H]  ,[MGO_ROI_2H] ,[Won_MGO_ROI_2H] ,[Prediction_Method] ,[Prediction_Accuracy] ,[Proj_sales], GETUTCDATE() as CreatedDate FROM PartnerSales Where Geo in (" + geo + ")  AND FinancialYear IN (" + financial + ")";
                Dts.Variables["User::DeleteQuery"].Value = "DELETE FROM PartnerSales Where Geo in (" + geo + ")  AND FinancialYear IN (" + financial + ")";
            }

            var strTo = string.Empty;
            if (Dts.Variables["User::UploadedBy"].Value.ToString().ToUpper() == Dts.Variables["User::ModifiedBy"].Value.ToString().ToUpper())
            {
                strTo = Dts.Variables["User::UploadedBy"].Value.ToString();
            }
            else
            {
                strTo = Dts.Variables["User::UploadedBy"].Value.ToString() + ";" + Dts.Variables["User::ModifiedBy"].Value.ToString();
            }
            Dts.Variables["User::FileOwners"].Value = strTo;
            Dts.TaskResult = (int)ScriptResults.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

    }
}


@[User::ColumnValidation]==True
@[User::ColumnValidation]==False
